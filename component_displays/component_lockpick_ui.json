{
    "name": "Lock Pick",
    "codename": "component_lockpick_ui",
    "value": "0",
    "quantity": "0",
    "credits_shop_item": "0",
    "type": "component_displays",
    "color": "#202327",
    "editedtime": "1677355302",
    "vars": {
        "options": "'name, value, x, y, w, h, lblW'",
        "getElement": "function (options) {\r\n    if (options == undefined) {\r\n        options = {\r\n            unUnlock: function () {\r\n                game.notify(\"UNLOCKED!\");\r\n            },\r\n            onBroken: function () {\r\n                game.notify(\"PICK BROKEN!!\");\r\n            },\r\n        };\r\n    }\r\n\r\n    function degreesToRadians(degrees) {\r\n        return degrees * (Math.PI \/ 180);\r\n    }\r\n\r\n    const debug = 0;\r\n\r\n    var pane = new UIPane();\r\n    let mouseDown = false;\r\n\r\n    pane.isInteractive();\r\n\r\n    pane.on(\"pointerdown\", () => {\r\n        mouseDown = true;\r\n    });\r\n    pane.on(\"pointerup\", () => {\r\n        broken = false;\r\n        mouseDown = false;\r\n    });\r\n\r\n    const lockSize = {\r\n        start: 310,\r\n        end: 50,\r\n    };\r\n\r\n    const lockPos = {\r\n        start: 0,\r\n        end: 0,\r\n    };\r\n\r\n    const diff = {\r\n        easy: 75,\r\n        medium: 50,\r\n        hard: 25,\r\n        nightmare: 10,\r\n    };\r\n\r\n    lockPos.start = game.rng(70, 290);\r\n    lockPos.end = lockPos.start + diff[\"nightmare\"];\r\n\r\n    let circleData = {\r\n        rad: 150,\r\n        startAngle: 310,\r\n        endAngle: 50,\r\n    };\r\n\r\n    const circ = function (data) {\r\n        let circle = new PIXI.Graphics();\r\n\r\n        circle.beginFill(data.fill || 0xffffff);\r\n        circle.drawCircle(0, 0, data.rad);\r\n        circle.endFill();\r\n        return circle;\r\n    };\r\n\r\n    let circle = circ(circleData);\r\n    pane.addChild(circle);\r\n    circle.x = pane.width \/ 4;\r\n    circle.y = pane.height \/ 4;\r\n\r\n    let startNode = circ({ rad: 10, fill: 0xff9922 });\r\n    pane.addChild(startNode);\r\n    startNode.x =\r\n        circle.x + circleData.rad * Math.sin(degreesToRadians(lockSize.start));\r\n    startNode.y =\r\n        circle.y + circleData.rad * Math.cos(degreesToRadians(lockSize.start));\r\n\r\n    let endNode = circ({ rad: 10, fill: 0x114477 });\r\n    pane.addChild(endNode);\r\n    endNode.x =\r\n        circle.x + circleData.rad * Math.sin(degreesToRadians(lockSize.end));\r\n    endNode.y =\r\n        circle.y + circleData.rad * Math.cos(degreesToRadians(lockSize.end));\r\n\r\n    let lockPosStartNode = circ({ rad: 10, fill: 0x0000ff });\r\n    pane.addChild(lockPosStartNode);\r\n    lockPosStartNode.x =\r\n        circle.x + circleData.rad * Math.sin(degreesToRadians(lockPos.start));\r\n    lockPosStartNode.y =\r\n        circle.y + circleData.rad * Math.cos(degreesToRadians(lockPos.start));\r\n\r\n    let lockPosEndNode = circ({ rad: 10, fill: 0xff0000 });\r\n    pane.addChild(lockPosEndNode);\r\n    lockPosEndNode.x =\r\n        circle.x + circleData.rad * Math.sin(degreesToRadians(lockPos.end));\r\n    lockPosEndNode.y =\r\n        circle.y + circleData.rad * Math.cos(degreesToRadians(lockPos.end));\r\n\r\n    let pickerNode = circ({ rad: 10, fill: 0xccffbb });\r\n    pane.addChild(pickerNode);\r\n    pickerNode.x = circle.x + circleData.rad * Math.sin(0);\r\n    pickerNode.y = circle.y + circleData.rad * Math.cos(0);\r\n\r\n    clearTimeout(window.lockPickTicker);\r\n\r\n    let lockHolder = new Sprite(\"sprite_lock_holder\");\r\n    lockHolder.x = circle.x+110;\r\n    lockHolder.y = circle.y;\r\n    pane.addChild(lockHolder);\r\n    lockHolder.setAnchor(0.5);\r\n\r\n    let lock = new Sprite(\"sprite_lock\");\r\n    lock.x = circle.x;\r\n    lock.y = circle.y;\r\n    pane.addChild(lock);\r\n    lock.setAnchor(0.5);\r\n\r\n    let lockPicker = new Sprite(\"sprite_lockpicker\");\r\n    lockPicker.x = circle.x; \/\/ - lockPicker.width\/2;\r\n    lockPicker.y = circle.y; \/\/ - lockPicker.height\/2\r\n    pane.addChild(lockPicker);\r\n    lockPicker.anchor.set(0.5, 1);\r\n\r\n    let origX = lock.x;\r\n    let broken = false;\r\n\r\n    circle.alpha = debug;\r\n    lockPosEndNode.alpha = debug;\r\n    lockPosStartNode.alpha = debug;\r\n    startNode.alpha = debug;\r\n    endNode.alpha = debug;\r\n\r\n    const lockTurn = (angle) => {\r\n        const canUnlock = angle > lockPos.start && angle < lockPos.end;\r\n\r\n        const SHAKE_ANGLE = 25;\r\n        const SHAKE_BREAK = SHAKE_ANGLE + 35;\r\n\r\n        if (!canUnlock && lock.angle > SHAKE_ANGLE) {\r\n            \/\/Cause shake\r\n            lock.x = origX + game.rng(-3, 3);\r\n        }\r\n\r\n        if (!canUnlock && lock.angle > SHAKE_BREAK) {\r\n            lockReset();\r\n            lockBroken();\r\n            return;\r\n        }\r\n\r\n        if (canUnlock && lock.angle > 160) {\r\n            lockUnlocked();\r\n            return;\r\n        }\r\n\r\n        lock.angle++;\r\n    };\r\n\r\n    let unlock = new Sprite(\"sprite_lock_unlocked\");\r\n    unlock.x = circle.x;\r\n    unlock.y = circle.y;\r\n    unlock.alpha = 0;\r\n    pane.addChild(unlock);\r\n    unlock.setAnchor(0.5);\r\n\r\n    const lockUnlocked = () => {\r\n        unlock.angle = lock.angle;\r\n        unlock.alpha = 1;\r\n        if (typeof options.onUnlock == \"function\") {\r\n            options.unUnlock.call(options);\r\n        }\r\n        return;\r\n    };\r\n\r\n    const lockBroken = () => {\r\n        broken = true;\r\n        mouseDown = false;\r\n        if (typeof options.onBroken == \"function\") {\r\n            options.onBroken.call(options);\r\n        }\r\n        return;\r\n    };\r\n\r\n    const lockReset = () => {\r\n        lock.x = origX;\r\n        unlock.alpha = 0;\r\n    };\r\n\r\n    const timer = () => {\r\n        if (!lockPicker) {\r\n            return;\r\n        }\r\n\r\n        window.lockPickTicker = setTimeout(timer, 10);\r\n\r\n        if (broken) {\r\n            \/\/Pick broken wait for reclick\r\n            \/\/ return;\r\n        }\r\n\r\n        let mouseX = game.screenMouseX;\r\n\r\n        let start = 0;\r\n        let end = pane.width \/ 2;\r\n\r\n        let percent = end \/ 100;\r\n        percent = mouseX \/ percent;\r\n\r\n        let angle = 360 * (percent \/ 100);\r\n\r\n        if (mouseDown) {\r\n            lockTurn(angle);\r\n            return;\r\n        }\r\n\r\n        if (lock.angle > 0) {\r\n            lock.angle--;\r\n        }\r\n\r\n        lockReset();\r\n\r\n        if (angle < lockSize.end) {\r\n            angle = lockSize.end;\r\n        }\r\n\r\n        if (angle > lockSize.start) {\r\n            angle = lockSize.start;\r\n        }\r\n\r\n        pickerNode.x =\r\n            circle.x + circleData.rad * Math.sin(degreesToRadians(angle));\r\n        pickerNode.y =\r\n            circle.y + circleData.rad * Math.cos(degreesToRadians(angle));\r\n\r\n        lockPicker.angle = 180 + -angle;\r\n    };\r\n\r\n    timer();\r\n\r\n    return pane;\r\n}\r\n"
    }
}