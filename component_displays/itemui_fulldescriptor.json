{
    "name": "Item Descriptor",
    "codename": "itemui_fulldescriptor",
    "value": "0",
    "quantity": "0",
    "credits_shop_item": "0",
    "type": "component_displays",
    "color": "#202327",
    "editedtime": "1675949056",
    "vars": {
        "options": "'item'",
        "getElement": "function(options) {\r\n  if (this.descUI && typeof this.descUI.destroy == 'function') {\r\n    this.descUI.destroy();\r\n    delete this.descUI;\r\n  }\r\n  if (options == undefined) {\r\n    options = new InventoryItem('ss_weapon_katana');\r\n  }\r\n\r\n  displayStat = function (name, label) {\r\n    return { name: name, label: label }\r\n  }\r\n  let recipe = _BLUEPRINTS.RECIPES['recipe_pickaxe'];\r\n\r\n  let name = options.readName || options.data.name || \"Junk item\";\r\n  let desc = options.data.description || options.meta.description || false;\r\n  if(options.hideDesc) {\r\n    desc = false;\r\n  }\r\n  let stats = options.data.stats || options.meta.stats || false;\r\n  let statTable = {};\r\n\r\n  if (options.meta.recipe || options.showRecipe) {\r\n    recipe = _BLUEPRINTS.RECIPES['recipe_' + options.meta.recipe];\r\n    if (!recipe) {\r\n      recipe = _BLUEPRINTS.RECIPES['recipe_' + options.codename];\r\n    }\r\n    let needs = recipe.require.split(',');\r\n    let amounts = recipe.amount.split(',');\r\n\r\n    stats = {};\r\n\r\n    for (let i = 0; i < needs.length; i++) {\r\n      stats[needs[i]] = amounts[i]\r\n      statTable[needs[i]] = displayStat(needs[i].charAt(0).toUpperCase() + needs[i].slice(1), 'v');\r\n    }\r\n\r\n  }\r\n  if (stats !== false) {\r\n    var width = options.oWidth || options.w || 450;\r\n    var textWidth = 'small'\r\n  } else {\r\n    var width = options.oWidth || options.w || 500;\r\n    var textWidth = 'wide'\r\n  }\r\n\r\n  \/\/Create the background for the UI last so that all the height and width are calculated based on\r\n  \/\/How many stats there are, and how long the description is\r\n\r\n  \/\/Create stats so we can find out desc offset\r\n\r\n  var statsContainer = new UIContainer();\r\n  let startY = 60;\r\n  let statY = startY;\r\n  let descY = startY;\r\n\r\n\r\n  if (stats !== false) {\r\n    var backdrop = new Sprite('uiicon_masterwork');\r\n\r\n  }\r\n\r\n\r\n\r\n  if (!Object.keys(statTable).length) {\r\n    statTable = {\r\n      \r\n      \/\/ Armours\r\n      'maxSpeed': displayStat('Max Speed', 'v%'),\r\n      'maxHP': displayStat('Max HP', 'v%'),\r\n      'maxWeight': displayStat('Max Weight', '+v'),\r\n\r\n      'savage': displayStat('Savage', '+v'),\r\n      'melee': displayStat('Melee', '+v'),\r\n      'athletics': displayStat('Athletics', '+v'),\r\n      'ranged': displayStat('Ranged', '+v'),\r\n      'toughness': displayStat('toughness', '+v'),\r\n      'strength': displayStat('Strength', '+v'),\r\n      'craft': displayStat('Craft', '+v'),\r\n      'intelligence': displayStat('Intelligence', '+v'),\r\n\r\n      'bluntReduction': displayStat('Blunt Reduction', '-v'),\r\n      'ballisticReduction': displayStat('Ballistic Reduction', '-v'),\r\n      'sharpReduction': displayStat('Sharp Reduction', '-v'),\r\n\r\n      'tempHeat': displayStat('Heat reduction', 'v hU'),\r\n      'tempCold': displayStat('Cold reduction', 'v hU'),\r\n      \r\n      \/\/ Weapons\r\n      \r\n      'baseDmg': displayStat('Base Damage', '+v'),\r\n      'speed': displayStat('Speed', '+v'),\r\n      'type': displayStat('Type', 'v'),\r\n      'bleedChance': displayStat('Bleed Chance', 'v%'),\r\n      'bleedDuration': displayStat('Bleed Duration', 'v'),\r\n      'range': displayStat('Range', 'Vm'),\r\n    }\r\n  }\r\n  for (statName in stats) {\r\n\r\n    var statsValue = stats[statName];\r\n    var statDisplayName = (statTable[statName]) ? statTable[statName].name : statName;\r\n    try {\r\n      var statLabel = statTable[statName].label.replace(\/v\/, statsValue).replace(\/V\/, statsValue*10);\r\n    } catch (e) {\r\n      console.log(\"Aucun\", statName);\r\n    }\r\n    var label = game.render.component('drawLabel', { name: statDisplayName, value: statLabel, h: 30, w: width - 50 });\r\n\r\n    label.x = 20;\r\n    label.y = statY;\r\n    statY += label.height + 2;\r\n    descY += label.height;\r\n    statsContainer.addChild(label);\r\n  }\r\n  \/\/Create desc first so we can measure it\r\n  if (options.isQuantity) {\r\n    if (options.resourceType) {\r\n      if (desc && desc.length > 0) {\r\n        desc = options.resourceType + \"`n`n\" + desc;\r\n      } else {\r\n        desc = options.resourceType;\r\n      }\r\n    } else {\r\n      if (desc && desc.length > 0) {\r\n        desc = \"Crafting Resource\\n\\n\" + desc;\r\n      } else {\r\n        desc = \"Crafting Resource\";\r\n      }\r\n    }\r\n  }\r\n\r\n  var lblDesc = game.render.mText(desc, 'item-desc-' + textWidth);\r\n  descHeight = lblDesc.mHeight;\r\n\r\n  if (!desc || !desc.length) {\r\n    descHeight = -20;\r\n  }\r\n\r\n  descContainer = new UIContainer();\r\n  if (desc && desc.length > 0) {\r\n    descUI = game.render.component('drawSlimPane', { w: width - 50, h: descHeight + 25 });\r\n\r\n    descContainer.addChild(descUI);\r\n    descContainer.addChild(lblDesc);\r\n    lblDesc.x = 10;\r\n    lblDesc.y = 10;\r\n  }\r\n\r\n  container = new UIContainer();\r\n\r\n  component = game.render.component('drawBoxPane', { w: width, h: descHeight + descY + 55, showX: (options.showX === false) ? false : true });\r\n  container.addChild(component);\r\n\r\n  if (options.meta.recipe || options.showRecipe) {\r\n    lblName = game.render.text(\"Blueprint: \" + name, 'item-name-1');\r\n  } else {\r\n    if (options.data.quality) {\r\n      lblName = game.render.text(name, 'item-name-' + options.data.quality);\r\n    } else {\r\n      lblName = game.render.text(name, 'item-name-1');\r\n\r\n    }\r\n  }\r\n\r\n  component.addChild(lblName);\r\n  lblName.x = 25;\r\n  lblName.y = 25;\r\n\r\n  \/\/Add the description\r\n  descContainer.x = 20;\r\n  descContainer.y = 55;\r\n  component.addChild(descContainer);\r\n  component.addChild(statsContainer);\r\n\r\n  statsContainer.y = descContainer.height;\r\n\r\n  let qty = 1;\r\n\r\n  if (options.isQuantity) {\r\n    qty = options.data.qty;\r\n  }\r\n\r\n  let value = false;\r\n  if (options.isShop) {\r\n    value = game.render.component('moneyLabel', { value: options.data.buyPrice * qty });\r\n  } else {\r\n    if (options.data.sellPrice > 0) {\r\n      value = game.render.component('moneyLabel', { value: options.data.sellPrice * qty });\r\n    }\r\n  }\r\n  if (!options.noMoney && value) {\r\n    component.addChild(value);\r\n\r\n    value.y = 20;\r\n    value.x = width - 130;\r\n  }\r\n  return container;\r\n}"
    }
}