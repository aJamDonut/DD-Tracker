{
    "name": "Helper - Get recipe",
    "codename": "pers_haul_helper",
    "value": "0",
    "quantity": "0",
    "credits_shop_item": "0",
    "type": "build_persistent_items",
    "color": null,
    "editedtime": null,
    "vars": {
        "sprite": "icon_build_spot",
        "meta": [],
        "events": {
            "onCreate": "function(item) {\r\n\titem.data.job = 'haul';\r\n  \titem.sync();\r\n  \tgame.offloader.addToIndex('jobs', item);\r\n  \r\n  \titem.alpha = 1;\r\n  \titem.steps = 0;\r\n  \titem.jobAnim = 'build';\r\n  \titem.maxSteps = 3;\r\n  \titem.phase = 0;\r\n  \tconsole.log(\"RUN ON CREATE\");\r\n  \titem.jobStep = function(data){\r\n      console.error(\"Job step\", this.phase, this.steps);\r\n      this.steps++;\r\n      \r\n      let caller = game.index.getFromIndex(data.callerId, 'all');\r\n      \r\n      caller.forceAnim = 'util\/build_'+caller.data.dir; \/\/Some animation to look like something is happening\r\n      \r\n      let parent = game.index.getFromIndex(this.data.parentId, 'all');\r\n      let source = game.index.getFromIndex(this.data.sourceId, 'all');\r\n      \r\n      let resource = this.data.resource;\r\n      let qty = this.data.qty;\r\n      let resources = source.inventory.getResources();\r\n      let localQty = resources['ss_item_'+resource];\r\n      \r\n      if(!localQty || localQty < 1) {\r\n        \/\/This container, is no longer valid (the resources moved.) thats fine tho we handle it\r\n        this.failed(\"Quantity changed, no problems.. expected exception\");\r\n\t\tcaller.completeJob(this);\r\n        return;\r\n      }\r\n      \r\n      if(this.steps === 3 && this.phase === 0) {\r\n        \r\n        this.x = parent.x;\r\n        this.y = parent.y;\r\n        this.phase = 1;\r\n        this.steps = 0;\r\n        this.data.job = \"dropoff\"; \/\/hidden queue\r\n        \r\n        \/\/caller.completeJob(this);\r\n        console.error(\"TAKE ITEMS\", this);\r\n        this.sync();\r\n        caller.forceAnim = false;\r\n        \r\n        let takeMax = (localQty >= qty) ? qty : localQty; \/\/Only take what we can\r\n        \r\n        if(takeMax > 10) {\r\n\t\t\ttakeMax = 10; \/\/Capping to ten for now\r\n        }\r\n        \r\n        if(caller.inventory.main.addResource(resource, takeMax)) {\r\n\t\t\t\/\/Life inventory full\r\n          \tsource.inventory.removeResource(resource, takeMax);\r\n        } else {\r\n\t\t\t\/\/Failed to remove\r\n          caller.completeJob(this); \/\/The worker probably failed, but if we just destroy ourselves we can be recreated later.\r\n          \r\n        }\r\n\t\treturn;\r\n      }\r\n      \r\n      if(this.steps === 3 && this.phase === 1) {\r\n        \r\n        this.phase = 2;\r\n        this.steps = 0;\r\n        \r\n        let callerResources = caller.inventory.main.getResources();\r\n        \r\n        if(!callerResources['ss_item_'+resource]) {\r\n\t\t\tcaller.completeJob(this);\r\n          \treturn;\r\n        }\r\n        \r\n        let giveMax = (qty < callerResources['ss_item_'+resource]) ? qty : callerResources['ss_item_'+resource]; \/\/Only give what we can\r\n        \r\n        console.log(\"Give resource\", resource, giveMax, qty);\r\n        \r\n        if(parent.inventory.addResource(resource, giveMax)) {\r\n        \tcaller.inventory.main.removeResource(resource, giveMax);  \r\n        }\r\n        \r\n        \r\n        \r\n        console.error(\"GIB ITEMS\", this);\r\n        \r\n        this.sync();\r\n        \r\n        caller.forceAnim = false;\r\n        \r\n        caller.completeJob(this);\r\n        this.alpha = 0;\r\n        \r\n      }\r\n      \r\n  \t}\r\n}",
            "onJobCheck": "function(item, life) {\r\n  \r\n  \/\/Only assign this job to those without the required resources\r\n  \r\n  let parent = this.helper.world.index.getFromIndex(this.data.parentId, 'all');\r\n  \r\n  let resource = item.data.resource;\r\n  let qty = item.data.qty;\r\n  let lifeQty = life.itemList['ss_item_'+resource];\r\n  \r\n  console.log(\"Looking for \"+qty+\" \"+resource + \" Has +\"+lifeQty, life.itemList);\r\n  \r\n  if(lifeQty && lifeQty > 0) {\r\n  \treturn false; \r\n  }\r\n  \r\n  return true;\r\n  \r\n}"
        }
    }
}