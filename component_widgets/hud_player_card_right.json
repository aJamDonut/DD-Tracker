{
    "name": "Player right card",
    "codename": "hud_player_card_right",
    "value": "0",
    "quantity": "0",
    "credits_shop_item": "0",
    "type": "component_widgets",
    "color": "#202327",
    "editedtime": "1679158245",
    "vars": {
        "options": "'player'",
        "getElement": "function (options) {\r\n    if (!options) {\r\n        options = {};\r\n    }\r\n\r\n    options.player = game.watching || new LifeObject();\r\n\r\n\r\n    var w = 500;\r\n    var h = 225;\r\n    var statsXOffset = 235;\r\n    var buttonsXOffset = 5;\r\n    var statsYOffset = 180;\r\n    var statSpace = 25;\r\n\r\n    let player = options.player;\r\n\r\n\r\n    const SLEEP_TIMEOUT = 1000;\r\n\r\n    \/*\r\n        player.addAndStartStatus('clonepod', {\r\n            duration: SLEEP_TIMEOUT,\r\n            source: this.id,\r\n        });\r\n        player.addAndStartStatus('dead', {\r\n            duration: SLEEP_TIMEOUT,\r\n            source: this.id,\r\n        });\r\n    *\/\r\n    \r\n    var offsetX = 20;\r\n    var offsetY = 15;\r\n    var hasPlayer = true;\r\n    var pane = game.render.componentRaw('drawBoxPane', { showX: game.editMode, name: 'test', callerObject: options.player, x: 0, y: 0, w: w, h: h });\r\n\r\n    let statusList = player.getStatuses();\r\n\r\n    function statusIcon(status, timeLeft) {\r\n        let icon = _BLUEPRINTS._STATUSES['c_effect_' + status].sprite;\r\n        if (!icon) {\r\n            icon = 'icon_stance_walk';\r\n        }\r\n\r\n\r\n        let pane = new UIPane({ w: 32, h: 32 });\r\n\r\n        pane.addChild(new ItemIcon(icon, { w: 32, h: 32 }));\r\n\r\n        if (!timeLeft || timeLeft < 0) {\r\n            return pane;\r\n        }\r\n\r\n        timeLeft = Math.floor(timeLeft \/ 1000) + \"s\";\r\n\r\n        let time = game.render.text(timeLeft, 'item-name-1');\r\n        time.scale.set(0.8);\r\n        time.anchor.set(0.5);\r\n        time.x = pane.width \/ 2\r\n        time.y = pane.height + 10;\r\n        pane.addChild(time);\r\n\r\n        return pane;\r\n    }\r\n\r\n    let startX = 36;\r\n    let startY = 16;\r\n    let spacer = 36;\r\n\r\n    for (let statusID in statusList) {\r\n        let status = statusList[statusID];\r\n        let endTime = status.startTime + status.options.duration\r\n        let timeLeft = endTime - game.ts\r\n\r\n        let icon = statusIcon(status.status, timeLeft);\r\n        icon.x = startX;\r\n        icon.y = startY;\r\n        startX += icon.width + spacer;\r\n        pane.addChild(icon);\r\n\r\n    }\r\n\r\n    var hudButton = game.render.componentRaw('hud_button', { name: 'Build', w: 130 });\r\n    hudButton.x = buttonsXOffset;\r\n    hudButton.y = statsYOffset;\r\n    buttonsXOffset += hudButton.width;\r\n    pane.addChild(hudButton);\r\n    hudButton.isInteractive();\r\n    hudButton.on('pointerup', function () {\r\n        game.setBuildMode();\r\n    });\r\n\r\n    var hudButton = game.render.componentRaw('hud_button', { name: ' ', w: 120 });\r\n    hudButton.x = buttonsXOffset;\r\n    hudButton.y = statsYOffset;\r\n    buttonsXOffset += hudButton.width;\r\n    pane.addChild(hudButton);\r\n    hudButton.isInteractive();\r\n    hudButton.on('pointerup', function () {\r\n\r\n    });\r\n\r\n    var hudButton = game.render.componentRaw('hud_button', { name: ' ', w: 120 });\r\n    hudButton.x = buttonsXOffset;\r\n    hudButton.y = statsYOffset;\r\n    buttonsXOffset += hudButton.width;\r\n    pane.addChild(hudButton);\r\n    hudButton.isInteractive();\r\n    hudButton.on('pointerup', function () {\r\n    });\r\n\r\n    var hudButton = game.render.componentRaw('hud_button', { name: 'Menu', w: 120 });\r\n    hudButton.x = buttonsXOffset;\r\n    hudButton.y = statsYOffset;\r\n    buttonsXOffset += hudButton.width;\r\n    pane.addChild(hudButton);\r\n    pane.noClickThrough();\r\n    hudButton.isInteractive();\r\n    hudButton.on('pointerup', function () {\r\n\r\n        game.render.aboveAll.addChild(game.render.component('frontMenu', {\r\n            close: true\r\n        }, 'frontMenu'));\r\n\r\n    });\r\n\r\n\r\n    return pane;\r\n}"
    }
}