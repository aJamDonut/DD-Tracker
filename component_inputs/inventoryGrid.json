{
    "name": "Inventory Grid",
    "codename": "inventoryGrid",
    "value": "0",
    "quantity": "0",
    "credits_shop_item": "0",
    "type": "component_inputs",
    "color": "#202327",
    "editedtime": "1675953785",
    "vars": {
        "getElement": "function (options) {\r\n    if (options == undefined) {\r\n        options = {};\r\n    }\r\n\r\n    var xBlocks = options.xBlocks || 1\r\n    var yBlocks = options.yBlocks || 1\r\n    var padding = options.padding || 2;\r\n    var x = options.x || 10;\r\n    var y = options.y || 10;\r\n    var w = options.w || xBlocks * (22 + (padding * 4));\r\n    var h = options.h || yBlocks * (22 + (padding * 4));\r\n\r\n    var inventory = options.inventory\r\n\r\n    if (!inventory) {\r\n        let tmpLife = new LifeObject();\r\n        inventory = tmpLife.inventory.main;\r\n    }\r\n\r\n    var blockWidth = (w - (padding * xBlocks) - padding) \/ xBlocks;\r\n    var blockHeight = (h - (padding * yBlocks) - padding) \/ yBlocks;\r\n\r\n    var pane = new UIContainer();\r\n    var under = new UIContainer();\r\n    var over = new UIContainer();\r\n\r\n    pane.addChild(under);\r\n    pane.addChild(over);\r\n\r\n    under.addChild(new UIPane({ fullscreen: false, fill: '0x3c3c3c', padding: 0, x: x, y: y, w: w, h: h }));\r\n\r\n    under.isInteractive();\r\n\r\n    var spotY = y + padding;\r\n\r\n    var foundIds = {}; \/\/Just a list of items already loaded, lazy checking these\r\n    for (var i = 0; i < yBlocks; i++) {\r\n        var spotX = x + padding;\r\n        for (var j = 0; j < xBlocks; j++) {\r\n            var slotData = inventory.getSlot(i, j);\r\n\r\n\r\n            if (slotData.item !== false && foundIds[slotData.item.id] == undefined) {\r\n                var itemBlockWidth = slotData.item.data.blockWidth || slotData.item.meta.blockWidth;\r\n                var itemBlockHeight = slotData.item.data.blockHeight || slotData.item.meta.blockHeight;\r\n\r\n                let maxW = itemBlockWidth * blockWidth;\r\n                let maxH = itemBlockHeight * blockHeight;\r\n\r\n\r\n                console.log(\"Inv item\", { slotData });\r\n                var item = new InventoryItem(slotData.item.name, slotData.item.data, options.disabled,\r\n                    { w: maxW, h: maxH }\r\n                );\r\n\r\n                item.isInteractive();\r\n                foundIds[slotData.item.id] = true;\r\n                item.id = slotData.item.id;\r\n                item.x = spotX;\r\n                item.y = spotY;\r\n                item.isShop = inventory.isShop; \/\/Inherit shop status from inventory\r\n                item.inventory = inventory;\r\n                item.inventoryDown = i;\r\n                item.inventoryAcross = j;\r\n                item.data.rawWidth = item.width;\r\n                item.data.rawHeight = item.height;\r\n                var itemBlockWidth = item.data.blockWidth || item.meta.blockWidth;\r\n                var itemBlockHeight = item.data.blockHeight || item.meta.blockHeight;\r\n\r\n\r\n\r\n\r\n                over.addChild(item);\r\n                if (item.isQuantity) {\r\n                    let qtyText = game.render.text(item.data.qty, 'item-gold')\r\n                    qtyText.x = item.x;\r\n                    qtyText.y = item.y;\r\n                    over.addChild(qtyText);\r\n                }\r\n                item.on('pointerup', function () {\r\n\r\n                    let item = this;\r\n                    let dropItem = game.holdingItem;\r\n                    if (!item || !dropItem) {\r\n                        return; \/\/Fast player?\r\n                    }\r\n                    let inv1 = item.inventory;\r\n                    let inv2 = dropItem.inventory;\r\n\r\n                    console.log(\"upo\", dropItem);\r\n\r\n\r\n                    if (!dropItem.isQuantity || dropItem.codename !== item.codename) {\r\n                        return;\r\n                    }\r\n                    if (item.data.qty >= item.maxStack) {\r\n                        return;\r\n                    }\r\n\r\n                    console.log(\"uporun\");\r\n\r\n                    dropItem.data.qty = parseInt(dropItem.data.qty);\r\n                    item.data.qty = parseInt(item.data.qty);\r\n\r\n                    let total = dropItem.data.qty;\r\n                    let freeSpace = item.maxStack - item.data.qty;\r\n\r\n                    console.log(\"Drop\", total, \"into\", freeSpace)\r\n\r\n                    if (item.data.qty + total > item.maxStack) {\r\n                        item.data.qty += freeSpace;\r\n                        dropItem.data.qty -= freeSpace;\r\n                    } else {\r\n                        item.data.qty += total;\r\n                        dropItem.data.qty -= total;\r\n                    }\r\n\r\n                    if (dropItem.data.qty < 1) {\r\n                        \/\/Destroy item\r\n                        dropItem.inventory.removeItem(dropItem);\r\n                    }\r\n\r\n                    if (typeof item.inventory.addCallback == 'function') {\r\n                        item.inventory.addCallback(item);\r\n                    }\r\n\r\n                    inv1.refreshGrid();\r\n                    inv2.refreshGrid();\r\n\r\n                })\r\n            }\r\n\r\n\r\n            var itemSlot = new UIPane({ noContainer: true, fullscreen: false, fill: '0x212121', padding: 0, x: spotX, y: spotY, w: blockWidth, h: blockHeight });\r\n\r\n\r\n\r\n            \/\/var itemSlot = new UIContainer();\r\n            itemSlot.inventory = inventory;\r\n            itemSlot.across = j;\r\n            itemSlot.down = i;\r\n            itemSlot.isInteractive();\r\n\r\n            \/\/Pixel perfect hack\r\n            \/\/Because UI panes have no real width we calculate some fake width and add it to the hit area\r\n\r\n            let px1 = (blockWidth \/ 1000) * 10\r\n            itemSlot.hitArea = new PIXI.Rectangle(0, 0, 1 + px1, 1 + px1); \/\/Setup hit area\r\n\r\n            if (slotData.item !== false) {\r\n                itemSlot.alpha = 0.25;\r\n            }\r\n\r\n\r\n            itemSlot.on('pointerup', function () {\r\n                if (game.holdingItem == undefined || game.holdingItem == false) {\r\n                    return false;\r\n                }\r\n\r\n                game.holdingItem.alpha = 0;\r\n                placeItem = game.holdingItem;\r\n                game.holdingItem.hitArea = new PIXI.Rectangle(0, 0, game.holdingItem.width, game.holdingItem.height); \/\/Setup hit area\r\n\r\n                var destroy = false;\r\n\r\n                \/\/Add to inventory\r\n                if (game.inventories.canAddToInventory(this.inventory, game.holdingItem, this)) {\r\n                    \/\/Sucess\r\n                    game.holdingItem.ghost.destroy();\r\n                    if (game.holdingItem.inventory !== undefined) {\r\n                        \/\/It already is in an inventory, so remove it before adding it here.\r\n                        console.log(\"add\/remove\", game.holdingItem, this.inventory);\r\n                        game.holdingItem.inventory.removeItem(game.holdingItem);\r\n\r\n                        if(!game.inventories.addToInventory(this.inventory, game.holdingItem, this)) {\r\n                            this.inventory.addItemNow(game.holdingItem);\r\n                        }\r\n                        \r\n                        destroy = true;\r\n                    } else {\r\n                        \/\/Add to inventory\r\n                        if (game.inventories.addToInventory(this.inventory, game.holdingItem, this) == false) {\r\n                            \/\/Failed to place\r\n                            game.holdingItem.alpha = 1;\r\n                        } else {\r\n                            destroy = true;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (game.inventories.isFarAway(this.inventory, game.holdingItem.inventory)) {\r\n                        game.notify(\"Too far away\");\r\n                    } else {\r\n                        let origInventory = game.holdingItem.inventory;\r\n\r\n                        if (game.holdingItem.inventory) {\r\n                            game.holdingItem.inventory.removeItem(game.holdingItem);\r\n                        }\r\n                        \/\/Failed to place in slot, try to just add to inventory\r\n                        if (!this.inventory.addItemNow(game.holdingItem, false, game.holdingItem.data.qty, true)) {\r\n                            origInventory.addItemNow(game.holdingItem, false, game.holdingItem.data.qty); \/\/Add it back since failed\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (game.holdingItem.inventory && game.holdingItem.inventory.refreshGrid !== undefined) {\r\n                    console.log(\"refresh grid\");\r\n                    game.holdingItem.inventory.refreshGrid();\r\n                }\r\n                game.holdingItem.ghost.destroy();\r\n                \/\/this.inventory.gridComponent.destroy();\r\n                \/\/this.inventory.getInventoryGrid(this.container);\r\n\r\n                \/\/this.container.addChild(this.inventory.gridComponent);\r\n                game.holdingItem.alpha = 1;\r\n\r\n\r\n                game.holdingItem = undefined;\r\n            });\r\n\r\n            under.addChild(itemSlot);\r\n            spotX += blockWidth + padding\r\n        }\r\n        spotY += blockHeight + padding\r\n\r\n    }\r\n    return pane;\r\n}"
    }
}