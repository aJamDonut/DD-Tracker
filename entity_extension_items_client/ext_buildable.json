{
    "name": "Item Buildable",
    "codename": "ext_buildable",
    "value": "0",
    "quantity": "0",
    "credits_shop_item": "0",
    "type": "entity_extension_items_client",
    "color": "#625e2b",
    "editedtime": "1679148230",
    "vars": {
        "events": {
            "onCreate": "function(item, options) {\r\n\tlet x = game.gridPos(item.x);\r\n  \tlet y = game.gridPos(item.y);\r\n\titem.alpha = 0.5;\r\n  \titem.data.owns = true; \/\/Player owns this.\r\n  \titem.data.built = false; \/\/Item not built yet (can be cancelled)\r\n  \r\n  \titem.data.job = 'build';\r\n  \titem.sync();\r\n  \tgame.offloader.addToIndex('jobs', item);\r\n    \r\n    item.alpha = 0.5;\r\n    item.steps = 0;\r\n    item.jobAnim = 'build';\r\n    item.maxSteps = 3;\r\n  \r\n  \titem.showCost(_BLUEPRINTS.RECIPES['recipe_'+this.data.recipe]);\r\n  \r\n    item.jobStep = function(data){\r\n      this.steps++;\r\n      \r\n      console.log(\"Build...\", this);\r\n\r\n      let recipe = game.session.getRecipe(this.data.recipe); \/\/What recipe it uses to craft\r\n      \r\n      console.log(\"Recipe\", recipe);\r\n      \r\n      let crafts = this.data.crafts; \/\/What item it craft (full name)\r\n      let complex = this.data.complex; \/\/If simpleitem or not\r\n      \r\n      let caller = game.index.getFromIndex(data.callerId, 'all');\r\n      \r\n      \/\/Get inventory\r\n      let inventory = caller.inventory.main;\r\n\r\n      let resources = inventory.getResources();\r\n\r\n      let requires = recipe.require.split(',');\r\n      let amounts = recipe.amount.split(',');\r\n\r\n      caller.forceAnim = 'util\/build_'+caller.data.dir;\r\n      \r\n      if(this.steps >= this.maxSteps) {\r\n        \r\n        for (let i = 0; i < requires.length; i++) {\r\n\r\n          var need = requires[i]; \/\/Avoiding word require\r\n          var amount = amounts[i];\r\n\r\n          if(!resources['ss_item_'+need]) {\r\n              this.msg(\"Need \" + (amount) + \" \" + need + \"!\");\r\n              caller.failJob(this);\r\n              return false;\r\n          }\r\n\r\n          if (resources['ss_item_'+need] < parseInt(amount)) {\r\n              this.msg(\"Need \" + (resources['ss_item_'+need] - amount) + \" more \" + need + \"!\");\r\n              caller.failJob(this);\r\n              return false;\r\n          }\r\n\r\n      }\r\n\r\n      \/\/Remove items now\r\n\r\n      for (let i = 0; i < requires.length; i++) {\r\n\r\n          var need = requires[i]; \/\/Avoiding word require\r\n          var amount = amounts[i];\r\n\r\n          inventory.removeResource(need, amount);\r\n\r\n      }\r\n        \r\n        \r\n        \r\n        let replacement = {};\r\n\r\n        this.data.isPlayer = true;\r\n        \r\n        if(this.data.complex) {\r\n          \treplacement = new ComplexItem(this.data.crafts, this.data);\r\n        } else {\r\n        \treplacement = new SimpleItem(this.data.crafts, this.data);\r\n        }\r\n\r\n        console.log(\"Replacement\", replacement);\r\n        replacement.scaleToGame();\r\n\r\n        replacement.x = this.x;\r\n        replacement.y = this.y;\r\n\r\n        game.world.addObject(replacement);\r\n\r\n        game.render.objectLayer.addChild(replacement);\r\n\r\n        replacement.onCreate();\r\n\t\t\t\r\n      \r\n        this.data.built = true;\r\n        \r\n        caller.completeJob(this);\r\n      }\r\n  \t}\r\n  \r\n  \r\n  \r\n}"
        }
    }
}