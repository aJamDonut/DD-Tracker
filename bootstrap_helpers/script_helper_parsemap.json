{
    "name": "Parse map",
    "codename": "script_helper_parsemap",
    "value": "0",
    "quantity": "0",
    "credits_shop_item": "0",
    "type": "bootstrap_helpers",
    "color": "#202327",
    "editedtime": null,
    "vars": {
        "exec": "function() {\r\n\r\n  const MAP_PARSE_TIMEOUT = 600000;\r\n\r\n  game.mapParser = {};\r\n\r\n  game.mapParser.reset = function () {\r\n    game.mapParser.uniqueLife = {};\r\n    game.mapParser.lifeCount = 0;\r\n    game.mapParser.itemCount = 0;\r\n    game.mapParser.nodeCount = 0;\r\n    game.mapParser.lastCheck = (game.mapParser.lastCheck) ? Date.now() : Date.now() - (MAP_PARSE_TIMEOUT * 2); \/\/Last time I parsed\r\n  }\r\n\r\n  game.mapParser.reset();\r\n  \r\n  game.updateState = function (force) {\r\n    \/\/Using date not TS coz TS pauses.\r\n    let lastCheck = Date.now() - game.mapParser.lastCheck;\r\n    console.log(\"Last check\", lastCheck, \"ms\");\r\n    if (!force && lastCheck < MAP_PARSE_TIMEOUT) {\r\n      \/\/Don't refresh before 10 seconds\r\n      return;\r\n    }\r\n    game.mapParser.parseMap();\r\n  }\r\n\r\n  game.getState = function (state) {\r\n\r\n  }\r\n\r\n  game.getLifeState = function (name) {\r\n    game.mapParser.updateState();\r\n    if (!game.mapParser.uniqueLife[name]) {\r\n      \/\/Can't find this life, the game must have broken.\r\n      console.error(\"[ABE-ERROR] Can't get state for Unique NPC: \", name);\r\n    }\r\n    return game.mapParser.uniqueLife[name];\r\n  }\r\n\r\n\r\n\r\n  game.mapParser.parseLife = function (life) {\r\n    \r\n    if(!life.data.name || life.data.name == 'undefined') {\r\n      return; \/\/Don't count generic NPCs\r\n    }\r\n\r\n    game.mapParser.lifeCount++;\r\n\r\n    game.mapParser.uniqueLife[life.data.name] = life;\r\n\r\n    \/\/If it can find the life in the map...\r\n    if (game.index.find(life.id)) {\r\n      game.mapParser.uniqueLife[life.data.name] = game.index.find(life.id);\r\n    }\r\n\r\n  }\r\n\r\n  game.mapParser.parseItem = function (item) {\r\n    game.mapParser.itemCount++;\r\n    if (item.class == 'LifeObject') {\r\n      game.mapParser.parseLife(item);\r\n    }\r\n  }\r\n\r\n  game.mapParser.parseNode = function (node, key) {\r\n    game.mapParser.nodeCount++;\r\n    let items = node.objects;\r\n    let keys = Object.keys(items);\r\n    let keyLen = keys.length;\r\n\r\n    for (let i = 0; i < keyLen; i++) {\r\n      let key = keys[i];\r\n      let item = items[key];\r\n      game.mapParser.parseItem(item);\r\n    }\r\n  }\r\n\r\n  game.mapParser.parseMap = function () {\r\n    \r\n    const t0 = performance.now();\r\n    game.mapParser.reset();\r\n    let tree = game.grid.chunkTree;\r\n    let keys = Object.keys(tree);\r\n    let keyLen = keys.length;\r\n\r\n    for (let i = 0; i < keyLen; i++) {\r\n      let key = keys[i];\r\n      let node = tree[key];\r\n      game.mapParser.parseNode(node, key);\r\n    }\r\n    const t1 = performance.now();\r\n\r\n    console.log(\"Parsed map\", game.mapParser.lifeCount, game.mapParser.itemCount, game.mapParser.nodeCount)\r\n    console.log(game.mapParser.uniqueLife);\r\n    let delay = Math.ceil(t1 - t0);\r\n    console.log(\"Parse took\", delay, \"milliseconds.\");\r\n\r\n    if(delay > 1000) {\r\n      console.error(\"[ABE-INFO] Parse took over 1 second!\");\r\n    }\r\n\r\n  }\r\n}"
    }
}